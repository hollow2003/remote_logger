import json
import logging
import threading
from jsonschema2db import JSONSchemaToPostgres
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from flask import Flask, request, jsonify, response
from remote_sidecar_launcher import RemoteSidecarLauncher

app = Flask(__name__)
DATABASE_URL = "postgresql+psycopg2://username:password@localhost/mydatabase"
engine = create_engine(
    DATABASE_URL,
    pool_size=10,           # 最大连接数
    max_overflow=20,        # 超过池大小时允许的最大溢出连接数
    pool_timeout=30,        # 等待连接池可用连接的超时时间
    pool_recycle=3600,      # 每个连接的最大生命周期（秒）
)
Session = sessionmaker(bind=engine)

@app.route('/launch_remote_sidecar', methods=['POST'])
def launchRemoteSidecar():
    data = response.json()
    if "service_config" not in data or\
        "control_port" not in data or\
        "ntp_address" not in data or\
        "redis_address" not in data or\
        "redis_port" not in data or\
        "target_redis_address" not in data or\
        "target_redis_port" not in data or\
        "remote_sidecar_launcher_ip" not in data:
        return "Missing Required Parameter"
    else:
        remoteSidecarLauncher = remoteSidecarLauncher(
            data.get("service_config"),
            data.get("control_port"),
            data.get("ntp_address"),
            data.get("redis_address"),
            data.get("redis_port"),
            data.get("target_redis_address"),
            data.get("target_redis_port"),
            data.get("remote_sidecar_launcher_ip"))
        threading.Thread(target=remoteSidecarLauncher.launch_remote_sidecar, args=()).start()

@app.route('/synSignal', methods=['GET'])
def synSignal():
    pass

